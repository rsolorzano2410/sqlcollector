<?xml version="1.0" encoding="UTF-8"?>
<SQLCollector>
	<SourceDatabases>
		<SourceDatabase id="oracledb1">
			<Host>localhost</Host>
			<Port>1521</Port>
			<DbName>xe</DbName>
			<Username>system</Username>
			<Password>oracle</Password>
			<Ssl>false</Ssl>
			<SslCertFilePath></SslCertFilePath>
			<ReconnectTimeoutSecs>20</ReconnectTimeoutSecs>
			<IntervalSecs>60</IntervalSecs>
			<DestDatabaseId>influxdb1</DestDatabaseId>
			<Measurements>
				<Measurement id="Activity"/>
				<Measurement id="Cache"/>
				<Measurement id="Efficiency"/>
				<Measurement id="Queueing"/>
				<Measurement id="Redos"/>
			</Measurements>
			<LogFileName>oracledb1</LogFileName>
			<LogLevel>debug</LogLevel>
		</SourceDatabase>
<!-- 
		<SourceDatabase id="oracledb1">
			<Host>172.17.0.11</Host>
			<Port>1521</Port>
			<DbName>oradb1</DbName>
			<Username>orauser1</Username>
			<Password>orapswd1</Password>
			<Ssl>false</Ssl>
			<SslCertFilePath></SslCertFilePath>
			<ReconnectTimeoutSecs>20</ReconnectTimeoutSecs>
			<IntervalSecs>60</IntervalSecs>
			<DestDatabaseId>influxdb1</DestDatabaseId>
			<Measurements>
				<Measurement id="msmt11"/>
				<Measurement id="msmt12"/>
				<Measurement id="msgr111"/>
				<Measurement id="msit1111"/>
			</Measurements>
			<LogFileName>oracledb1</LogFileName>
			<LogLevel>debug</LogLevel>
		</SourceDatabase>
		<SourceDatabase id="oracledb2">
			<Host>172.17.0.12</Host>
			<Port>1521</Port>
			<DbName>oradb2</DbName>
			<Username>orauser2</Username>
			<Password>orapswd2</Password>
			<Ssl>false</Ssl>
			<SslCertFilePath></SslCertFilePath>
			<ReconnectTimeoutSecs>20</ReconnectTimeoutSecs>
			<IntervalSecs>60</IntervalSecs>
			<DestDatabaseId>influxdb2</DestDatabaseId>
			<Measurements>
				<Measurement id="msmt21"/>
				<Measurement id="msmt22"/>
				<Measurement id="msgr211"/>
				<Measurement id="msit2111"/>
			</Measurements>
			<LogFileName>oracledb2</LogFileName>
			<LogLevel>info</LogLevel>
		</SourceDatabase>
-->
	</SourceDatabases>
	<DestDatabases>
		<DestDatabase id="influxdb1">
			<Host>localhost</Host>
			<Port>8086</Port>
			<DbName>ipasdb</DbName>
			<Username>admin</Username>
			<Password>password4admin</Password>
			<Ssl>false</Ssl>
			<SslCertFilePath>/etc/ssl/influxdb-selfsigned.crt</SslCertFilePath>
			<ReconnectTimeoutSecs>20</ReconnectTimeoutSecs>
		</DestDatabase>
<!-- 
		<DestDatabase id="influxdb1">
			<Host>172.17.0.1</Host>
			<Port>8086</Port>
			<DbName>ipasdb1</DbName>
			<Username>user1</Username>
			<Password>pswd1</Password>
			<Ssl>false</Ssl>
			<SslCertFilePath></SslCertFilePath>
			<ReconnectTimeoutSecs>20</ReconnectTimeoutSecs>
		</DestDatabase>
		<DestDatabase id="influxdb2">
			<Host>172.17.0.2</Host>
			<Port>8086</Port>
			<DbName>ipasdb2</DbName>
			<Username>user2</Username>
			<Password>pswd2</Password>
			<Ssl>false</Ssl>
			<SslCertFilePath></SslCertFilePath>
			<ReconnectTimeoutSecs>20</ReconnectTimeoutSecs>
		</DestDatabase>
-->
	</DestDatabases>
	<Queries>
		<Query id="Average_Active_Sessions">
			<Statement>SELECT value FROM v$sysmetric WHERE group_id = 2 AND metric_name = 'Average Active Sessions'</Statement>
			<Columns>
				<Column>
					<Name>value</Name>
					<DestName>Average_Active_Sessions</DestName>
					<Type>field</Type>
					<DataType>float</DataType>
				</Column>
			</Columns>
		</Query>
		<Query id="Current_Logons_Count">
			<Statement>SELECT value FROM v$sysmetric WHERE group_id = 2 AND metric_name = 'Current Logons Count'</Statement>
			<Columns>
				<Column>
					<Name>value</Name>
					<DestName>Current_Logons_Count</DestName>
					<Type>field</Type>
					<DataType>integer</DataType>
				</Column>
			</Columns>
		</Query>
		<Query id="Database_CPU_Time_Ratio">
			<Statement>SELECT value FROM v$sysmetric WHERE group_id = 2 AND metric_name = 'Database CPU Time Ratio'</Statement>
			<Columns>
				<Column>
					<Name>value</Name>
					<DestName>Database_CPU_Time_Ratio</DestName>
					<Type>field</Type>
					<DataType>float</DataType>
				</Column>
			</Columns>
		</Query>
		<Query id="Database_Time_Per_Sec">
			<Statement>SELECT value FROM v$sysmetric WHERE group_id = 2 AND metric_name = 'Database Time Per Sec'</Statement>
			<Columns>
				<Column>
					<Name>value</Name>
					<DestName>Database_Time_Per_Sec</DestName>
					<Type>field</Type>
					<DataType>float</DataType>
				</Column>
			</Columns>
		</Query>
		<Query id="Database_Wait_Time_Ratio">
			<Statement>SELECT value FROM v$sysmetric WHERE group_id = 2 AND metric_name = 'Database Wait Time Ratio'</Statement>
			<Columns>
				<Column>
					<Name>value</Name>
					<DestName>Database_Wait_Time_Ratio</DestName>
					<Type>field</Type>
					<DataType>float</DataType>
				</Column>
			</Columns>
		</Query>
		<Query id="Enqueue_Requests_Per_Sec">
			<Statement>SELECT value FROM v$sysmetric WHERE group_id = 2 AND metric_name = 'Enqueue Requests Per Sec'</Statement>
			<Columns>
				<Column>
					<Name>value</Name>
					<DestName>Enqueue_Requests_Per_Sec</DestName>
					<Type>field</Type>
					<DataType>float</DataType>
				</Column>
			</Columns>
		</Query>
		<Query id="Enqueue_Timeouts_Per_Sec">
			<Statement>SELECT value FROM v$sysmetric WHERE group_id = 2 AND metric_name = 'Enqueue Timeouts Per Sec'</Statement>
			<Columns>
				<Column>
					<Name>value</Name>
					<DestName>Enqueue_Timeouts_Per_Sec</DestName>
					<Type>field</Type>
					<DataType>float</DataType>
				</Column>
			</Columns>
		</Query>
		<Query id="Enqueue_Waits_Per_Sec">
			<Statement>SELECT value FROM v$sysmetric WHERE group_id = 2 AND metric_name = 'Enqueue Waits Per Sec'</Statement>
			<Columns>
				<Column>
					<Name>value</Name>
					<DestName>Enqueue_Waits_Per_Sec</DestName>
					<Type>field</Type>
					<DataType>float</DataType>
				</Column>
			</Columns>
		</Query>
		<Query id="Execute_Without_Parse_Ratio">
			<Statement>SELECT value FROM v$sysmetric WHERE group_id = 2 AND metric_name = 'Execute Without Parse Ratio'</Statement>
			<Columns>
				<Column>
					<Name>value</Name>
					<DestName>Execute_Without_Parse_Ratio</DestName>
					<Type>field</Type>
					<DataType>float</DataType>
				</Column>
			</Columns>
		</Query>
		<Query id="Executions_Per_Sec">
			<Statement>SELECT value FROM v$sysmetric WHERE group_id = 2 AND metric_name = 'Executions Per Sec'</Statement>
			<Columns>
				<Column>
					<Name>value</Name>
					<DestName>Executions_Per_Sec</DestName>
					<Type>field</Type>
					<DataType>float</DataType>
				</Column>
			</Columns>
		</Query>
		<Query id="Global_Cache_Average_CR_Get_Time">
			<Statement>SELECT value FROM v$sysmetric WHERE group_id = 2 AND metric_name = 'Global Cache Average CR Get Time'</Statement>
			<Columns>
				<Column>
					<Name>value</Name>
					<DestName>Global_Cache_Average_CR_Get_Time</DestName>
					<Type>field</Type>
					<DataType>float</DataType>
				</Column>
			</Columns>
		</Query>
		<Query id="Global_Cache_Average_Current_Get_Time">
			<Statement>SELECT value FROM v$sysmetric WHERE group_id = 2 AND metric_name = 'Global Cache Average Current Get Time'</Statement>
			<Columns>
				<Column>
					<Name>value</Name>
					<DestName>Global_Cache_Average_Current_Get_Time</DestName>
					<Type>field</Type>
					<DataType>float</DataType>
				</Column>
			</Columns>
		</Query>
		<Query id="Global_Cache_Blocks_Corrupted">
			<Statement>SELECT value FROM v$sysmetric WHERE group_id = 2 AND metric_name = 'Global Cache Blocks Corrupted'</Statement>
			<Columns>
				<Column>
					<Name>value</Name>
					<DestName>Global_Cache_Blocks_Corrupted</DestName>
					<Type>field</Type>
					<DataType>float</DataType>
				</Column>
			</Columns>
		</Query>
		<Query id="Global_Cache_Blocks_Lost">
			<Statement>SELECT value FROM v$sysmetric WHERE group_id = 2 AND metric_name = 'Global Cache Blocks Lost'</Statement>
			<Columns>
				<Column>
					<Name>value</Name>
					<DestName>Global_Cache_Blocks_Lost</DestName>
					<Type>field</Type>
					<DataType>float</DataType>
				</Column>
			</Columns>
		</Query>
		<Query id="IO_Megabytes_per_Second">
			<Statement>SELECT value FROM v$sysmetric WHERE group_id = 2 AND metric_name = 'I/O Megabytes per Second'</Statement>
			<Columns>
				<Column>
					<Name>value</Name>
					<DestName>IO_Megabytes_per_Second</DestName>
					<Type>field</Type>
					<DataType>float</DataType>
				</Column>
			</Columns>
		</Query>
		<Query id="IO_Requests_per_Second">
			<Statement>SELECT value FROM v$sysmetric WHERE group_id = 2 AND metric_name = 'I/O Requests per Second'</Statement>
			<Columns>
				<Column>
					<Name>value</Name>
					<DestName>IO_Requests_per_Second</DestName>
					<Type>field</Type>
					<DataType>float</DataType>
				</Column>
			</Columns>
		</Query>
		<Query id="Physical_Reads_Per_Sec">
			<Statement>SELECT value FROM v$sysmetric WHERE group_id = 2 AND metric_name = 'Physical Reads Per Sec'</Statement>
			<Columns>
				<Column>
					<Name>value</Name>
					<DestName>Physical_Reads_Per_Sec</DestName>
					<Type>field</Type>
					<DataType>float</DataType>
				</Column>
			</Columns>
		</Query>
		<Query id="Redo_Allocation_Hit_Ratio">
			<Statement>SELECT value FROM v$sysmetric WHERE group_id = 2 AND metric_name = 'Redo Allocation Hit Ratio'</Statement>
			<Columns>
				<Column>
					<Name>value</Name>
					<DestName>Redo_Allocation_Hit_Ratio</DestName>
					<Type>field</Type>
					<DataType>float</DataType>
				</Column>
			</Columns>
		</Query>
		<Query id="Redo_Generated_Per_Sec">
			<Statement>SELECT value FROM v$sysmetric WHERE group_id = 2 AND metric_name = 'Redo Generated Per Sec'</Statement>
			<Columns>
				<Column>
					<Name>value</Name>
					<DestName>Redo_Generated_Per_Sec</DestName>
					<Type>field</Type>
					<DataType>float</DataType>
				</Column>
			</Columns>
		</Query>
		<Query id="Response_Time_Per_Txn">
			<Statement>SELECT value FROM v$sysmetric WHERE group_id = 2 AND metric_name = 'Response Time Per Txn'</Statement>
			<Columns>
				<Column>
					<Name>value</Name>
					<DestName>Response_Time_Per_Txn</DestName>
					<Type>field</Type>
					<DataType>float</DataType>
				</Column>
			</Columns>
		</Query>
		<Query id="Soft_Parse_Ratio">
			<Statement>SELECT value FROM v$sysmetric WHERE group_id = 2 AND metric_name = 'Soft Parse Ratio'</Statement>
			<Columns>
				<Column>
					<Name>value</Name>
					<DestName>Soft_Parse_Ratio</DestName>
					<Type>field</Type>
					<DataType>float</DataType>
				</Column>
			</Columns>
		</Query>
	</Queries>
	<Measurements>
		<Measurement id="Activity">
			<Queries>
				<Query id="Average_Active_Sessions"/>
				<Query id="Current_Logons_Count"/>
				<Query id="Database_Time_Per_Sec"/>
				<Query id="Executions_Per_Sec"/>
				<Query id="IO_Megabytes_per_Second"/>
				<Query id="IO_Requests_per_Second"/>
				<Query id="Physical_Reads_Per_Sec"/>
			</Queries>
		</Measurement>
		<Measurement id="Cache">
			<Queries>
				<Query id="Global_Cache_Average_CR_Get_Time"/>
				<Query id="Global_Cache_Average_Current_Get_Time"/>
				<Query id="Global_Cache_Blocks_Corrupted"/>
				<Query id="Global_Cache_Blocks_Lost"/>
			</Queries>
		</Measurement>
		<Measurement id="Efficiency">
			<Queries>
				<Query id="Database_CPU_Time_Ratio"/>
				<Query id="Database_Wait_Time_Ratio"/>
				<Query id="Execute_Without_Parse_Ratio"/>
				<Query id="Response_Time_Per_Txn"/>
				<Query id="Soft_Parse_Ratio"/>
			</Queries>
		</Measurement>
		<Measurement id="Queueing">
			<Queries>
				<Query id="Enqueue_Requests_Per_Sec"/>
				<Query id="Enqueue_Timeouts_Per_Sec"/>
				<Query id="Enqueue_Waits_Per_Sec"/>
			</Queries>
		</Measurement>
		<Measurement id="Redos">
			<Queries>
				<Query id="Redo_Allocation_Hit_Ratio"/>
				<Query id="Redo_Generated_Per_Sec"/>
			</Queries>
		</Measurement>
	</Measurements>
	<MeasurementGroups>
	<!-- 
	 MeasurementGroups ARE NOT USED FOR CURRENT VERSION
	 -->
		<MeasurementGroup id="msgr111">
			<Measurements>
				<Measurement id="msmt11"/>
				<Measurement id="msmt12"/>
			</Measurements>
		</MeasurementGroup>
		<MeasurementGroup id="msgr211">
			<Measurements>
				<Measurement id="msmt21"/>
				<Measurement id="msmt22"/>
			</Measurements>
		</MeasurementGroup>
	</MeasurementGroups>
	<IterateGroups>
	<!-- 
	 IterateGroups ARE NOT USED FOR CURRENT VERSION
	 -->
		<IterateGroup id="msit1111">
			<Query id="q_db_instances">
<!-- 
				<Statement cache="true" cacheTimeSecs="300">
					select t.host_name, t.target_name, t.instance_name, t.database_name FROM MGMT$DB_DBNINSTANCEINFO t
				</Statement>
-->
	            <Statement cache="true" cacheTimeSecs="300">
	                select 'target_name' as target_name, 'host_name' as host_name, 'xe' as instance_name, 'database_name' as database_name FROM dual
	                union
	                select 'target_name2' as target_name, 'host_name' as host_name, 'xe2' as instance_name, 'database_name' as database_name FROM dual
	                union
	                select 'target_name3' as target_name, 'host_name' as host_name, 'xe3' as instance_name, 'database_name' as database_name FROM dual
	                union
	                select 'target_name4' as target_name, 'host_name' as host_name, 'xe4' as instance_name, 'database_name' as database_name FROM dual
	                union
	                select 'target_name5' as target_name, 'host_name' as host_name, 'xe5' as instance_name, 'database_name' as database_name FROM dual
	            </Statement>
				<Columns>
					<Column>
						<Name>target_name</Name>
						<!-- Type key used to indicate this is a key column used as a search parameter -->
						<Type>key</Type>
					</Column>
					<Column>
						<Name>instance_name</Name>
						<!-- Type InstancesFrom used for writing the value of this column as a tag for influx -->
						<Type>InstancesFrom</Type>
					</Column>
					<Column>
						<Name>host_name</Name>
					</Column>
					<Column>
						<Name>database_name</Name>
					</Column>
				</Columns>
			</Query>
			<Queries>
				<Query id="q_db_io"/>
				<Query id="q_db_wait">
					<!-- 'buffer busy waits','db file sequential read','log file switch completion','latch free' -->
					<Parameters>
						<!--arguments for IN condition of query-->
<!-- 
						<Parameter argument="IN">buffer busy waits</Parameter>
						<Parameter argument="IN">db file sequential read</Parameter>
 -->
						<Parameter>buffer busy waits</Parameter>
						<Parameter>db file sequential read</Parameter>
						<Parameter argument="IN">log file switch completion</Parameter>
						<Parameter argument="IN">latch free</Parameter>
					</Parameters>
				</Query>
				<Query id="q_db_time">
					<!-- 'DB time', 'DB CPU' -->
					<Parameters>
						<!--arguments for IN condition of query-->
						<Parameter argument="IN">DB time</Parameter>
						<Parameter argument="IN">DB CPU</Parameter>
					</Parameters>
				</Query>
<!-- 
				<Query id="q_db_control_grid">
					<Parameters>
-->
						<!--type: column or literal - default literal-->
						<!--type=column: the value passed as parameter is the value obtained on previous query-->
<!-- 
						<Parameter type="column">target_name</Parameter>
-->
						<!--arguments for IN condition of query-->
<!-- 
						<Parameter argument="IN">dbtime_ps</Parameter>
						<Parameter argument="IN">response_time_pt</Parameter>
						<Parameter argument="IN">cpu_time_pct</Parameter>
						<Parameter argument="IN">redologalloc_hit_pct</Parameter>
						<Parameter argument="IN">redosize_ps</Parameter>
						<Parameter argument="IN">interconnect_rate</Parameter>
						<Parameter argument="IN">Logons</Parameter>
						<Parameter argument="IN">avg_active_sessions</Parameter>
					</Parameters>
				</Query>
-->
			</Queries>
		</IterateGroup>
<!-- 
		<IterateGroup id="msit2111">
			<Query id="q_db_instances">
				<Statement cache="true" cacheTimeSecs="300">
					select t.host_name, t.target_name, t.instance_name, t.database_name FROM MGMT$DB_DBNINSTANCEINFO t
				</Statement>
				<Columns>
					<Column>
						<Name>target_name</Name>
-->
						<!-- Type key used to indicate this is a key column used as a search parameter -->
<!-- 
						<Type>key</Type>
					</Column>
					<Column>
						<Name>instance_name</Name>
-->
						<!-- Type InstancesFrom used for writing the value of this column as a tag for influx -->
<!-- 
						<Type>InstancesFrom</Type>
					</Column>
					<Column>
						<Name>host_name</Name>
					</Column>
					<Column>
						<Name>database_name</Name>
					</Column>
				</Columns>
			</Query>
			<Queries>
				<Query id="q_db_control_grid">
					<Parameters>
-->
						<!-- type: column or literal - default literal -->
						<!-- type=column: the value passed as parameter is the value obtained from a query, not a literal value -->
<!-- 
						<Parameter type="column">target_name</Parameter>
-->
						<!-- arguments for IN condition of query -->
<!-- 
						<Parameter argument="IN">executions_ps</Parameter>
						<Parameter argument="IN">executeswoparse_pct</Parameter>
						<Parameter argument="IN">softparse_pct</Parameter>
						<Parameter argument="IN">enqreqs_ps</Parameter>
						<Parameter argument="IN">enqtimeouts_ps</Parameter>
						<Parameter argument="IN">enqwaits_ps</Parameter>
						<Parameter argument="IN">physreads_ps</Parameter>
						<Parameter argument="IN">iorequests_ps</Parameter>
						<Parameter argument="IN">iombs_ps</Parameter>
					</Parameters>
				</Query>
			</Queries>
		</IterateGroup>
-->
	</IterateGroups>
	<SelfMon>
		<!-- 
			Section with the parameters for Self Monitoring 
			enabled: true/false, enables/disables self monitoring
			freq: send data Frequency in seconds
			DestDatabaseId: string with the id of the database where the self monitoring will be saved
			ExtraTags: string with extra tags in format tag1=value1,tag2=value2,...,tagN=valueN
			LogFileName: string with the name of the log file
			LogLevel: string with the log level for the log file. valid values: trace,debug,info,warn,error,fatal
		-->
		<enabled>true</enabled>
		<freq>60</freq>
		<DestDatabaseId>influxdb1</DestDatabaseId>
		<ExtraTags>instance=sqlcollector01</ExtraTags>
		<LogFileName>SelfMonLogs</LogFileName>
		<LogLevel>debug</LogLevel>
		<!-- 
		prepare for next version 
		#inherit device tags
		<inheritdevicetags>true</inheritdevicetags>
		-->
	</SelfMon>
	<LoggingConf>
		<!-- 
			Section with the generic parameters for logging 
			LogPath: string with the path for logs
			LogFileName: string with the name of the generic log file
			LogLevel: string with the log level for the log file. valid values: trace,debug,info,warn,error,fatal
			LogPattern: string with the pattern for logs
			LogRollingPattern: string with the rolling pattern for logs.
				The logs to be rolled will be saved joining: LogPath+LogFileName+LogRollingPattern+".log.gz"
		-->
		<LogPath>logs/</LogPath>
		<LogFileName>SQLCollector</LogFileName>
		<LogLevel>debug</LogLevel>
		<LogPattern>[%5p] - %d{yyyy-MM-dd HH:mm:ss.SSS} - %m%n</LogPattern>
		<LogRollingPattern>-%d{yyyy-MM-dd}</LogRollingPattern>
	</LoggingConf>
</SQLCollector>